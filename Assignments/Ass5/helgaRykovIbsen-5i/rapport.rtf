Task 1

Collect accepting/rejecting states into initial groups:

G1 = {s3}                               ACCEPTING
G2 = {s1, s2, s4, s5, s6, s7, s8}       REJECTING

Checking G1:

G1  0   1
---------
s3  G2  G1

Consistant, mark G1.                      ACCEPTING 

Checking G2:

G2  0   1
----------
s1  G2  G2
s2  G2  G1
s4  G1  G2
s5  G2  G2
s6  G1  G2
s7  G2  G2
s8  G2  G1

Inconsistent, remove G2 and split into:

G3 = {s1, s5, s7}  (row G2 G2)          REJECTING
G4 = {s2, s8}  (row G2 G1)              REJECTING
G5 = {s4, s6}  (row G1 G2)              REJECTING

and unmark everything.

Checking G3:

G3  0   1
----------
s1  G4  G5 
s5  G4  G5
s7  G3  G3

Inconsistent, remove G3 and split into:

G6 = {s1, s5}   (row G4 G5)             REJECTING START
G7 = {s7}       (row G3 G3)             REJECTING 

Checking G6:

G6  0   1
----------
s1  G4  G5 
s5  G4  G5

Consistent, mark G6.    

Checking G4:

G4  0   1
----------
s2  G7  G1 
s8  G7  G1

Consistent, mark G4.

Checking G5:

G5  0   1
----------
s4  G1  G7 
s6  G1  G7

Consistent, mark G5.

Check G1 again:

G1  0   1
----------
s3  G6  G1

Consistant, mark G1.

Check G7 again:

G7  0   1
----------
s7  G7  G6

All non-singleton groups marked. Final DFA has 5 states:

G1  0   1
----------
s3  G6  G1

G4  0   1
----------
s2  G7  G1 
s8  G7  G1

G5  0   1
----------
s4  G1  G7 
s6  G1  G7

G6  0   1
----------
s1  G4  G5 
s5  G4  G5

G7  0   1
----------
s7  G7  G6


Final DFA with consistent groups as states, collected from above:

            0   1     kind
--------------------------------------
G1={s3}     G6  G1    ACCEPTING
G4={s2,28}  G7  G1    REJECTING
G5={s4,s6}  G1  G7    REJECTING
G6={s1,s5}  G4  G5    REJECTING, START
G7={s7}     G7  G6    REJECTING

See the resulting DFA in Attached.pdf



Task 2.

a. Using the alphabet of decimal digits (0–9), 
give regular expressions describing the following 
languages. Also, briefly explain how/why your REs work.

(i) "Proper" numbers (i.e., with no unnecessary leading zeros)
 that are divisible by 5:

Given the definition of Context-Free Grammar, we use 
the alphabet {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, and assume 
that the "proper" numbers cannot start with a 0 (except 
for the number 0 itself), but must end with either 0 or 5 
to be divisible by 5.

Given this, we can define the CFG as follows:

Terminal symbols: Big Sigma = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

Nonterminal symbols: N = {S, A}

Start symbol: S

Productions (P):

S -> 0 | 5 | A5 | A0
A -> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 1A | 2A | 3A | 4A | 5A | 
6A | 7A | 8A | 9A        

(A generates numbers from 1 to 9 without leading zeros)

This language can be covered by a regular expression:

0 | 5 | [1-9][0-9]* [50]  

("[1-9][0-9]*5" accounts A5 production in the grammar 
"[1-9][0-9]*0" accounts A0 production in the grammar)

(ii) Numbers (not necessarily proper) in which digit 5 occurs 
exactly three times:

S ->   0S | 1S | 2S | 3S | 4S | 6S | 7S | 8S | 9S | 5S1
S1 -> 0S1 | 1S1 | 2S1 | 3S1 | 4S1 | 6S1 | 7S1 | 8S1 | 9S1 | 5S2
S2 -> 0S2 | 1S2 | 2S2 | 3S2 | 4S2 | 6S2 | 7S2 | 8S2 | 9S2 | 5S3
S3 -> 0S3 | 1S3 | 2S3 | 3S3 | 4S3 | 6S3 | 7S3 | 8S3 | 9S3 | ε

This language can be covered by the regular expression:

[0-4 6-9]* 5 [0-4 6-9]* 5 [0-4 6-9]* 5 [0-4 6-9]*


(iii)  Numbers satisfying both (i) and (ii):

S ->   1S | 2S | 3S | 4S | 6S | 7S | 8S | 9S  | 5S1
S1 -> 0S1 | 1S1 | 2S1 | 3S1 | 4S1 | 6S1 | 7S1 | 8S1 | 9S1 | 5S2
S2 -> 0S2 | 1S2 | 2S2 | 3S2 | 4S2 | 6S2 | 7S2 | 8S2 | 9S2 | 5S4
S4 -> S3 | ε
S3 -> 0S3 | 1S3 | 2S3 | 3S3 | 4S3 | 6S3 | 7S3 | 8S3 | 9S3 | S5
S5 -> 0

This language can be covered by the regular expression:

[1-4 6-9]* 5 [0-4 6-9]* 5 [0-4 6-9]* 5 ([0-4 6-9]* 0)?

(Where the last "5 ([0-4 6-9]* 0)?" ensures that reg exp ends with 5 or 0.)

Feedback: this regex does not accept numbers such as 10555


b. Are the following languages over the alphabet of decimal digits regular? 
Give short convincing reasons for your answers:

(i) Numbers (not necessarily proper) that contain digit 1 exactly as many times as digit 2:

No, such language (Big Sigma = {0,1,2,3,4,5,6,7,8,8}) cannot be described with regular expressions, 
it may contain an infinite number of decimal digits [3-9 0], an infinite number of
1s and 2s and an infinite numeber of combinations of both [3-9 0], 1 and 2.
In other words, we cannot keep track of the number of 1s or 2s.


(ii) Numbers (not necessarily proper) less than 1,000,000, that contain digit 1 exactly as many times as digit 2.

Yes, this language would be posiible to cover with a regular expression, because
we are having a limited number of cases described above. Yet, it would still be a 
terribly long regular expression to cover all possible cases.


Task 3.

Ambiguous grammar
-----------------

B -> B && B
B -> B || B
B -> ( B )
B -> true
B -> false

Unambiguous grammar
-------------------

B -> B' && B | B'
B -> B || B' | B'
B' -> ( B )
B' -> true
B' -> false 

Since && and || have different associativity, they cannot be placed on the same level.

1.  S -> E
2.  E -> E || T
3.  E -> T
4.  T -> T && F
5.  T -> F
6.  F -> ( E )
7.  F -> true
8.  F -> false


Task 4. 

E -> E E +
E -> E E *
E -> num

There's both left recursion in Exp og Exp2, if we rewrite the grammar above:

Exp ->  Exp + Exp2
Exp ->  Exp2
Exp2 -> Exp2 * Exp3
Exp2 -> Exp3
Exp3 -> num
Exp3 -> (Exp)

a. Eliminate Left-Recursion in the grammar above:

Book (pp.52, 71):

1. E  ->  num E'                       // start with final step a number eftergfulgt af en ny terminal E'
2. E' ->  ε                            // den nye non-terminal skal gerne være NULL, så vi har et tal tilbage
3. E' ->  E +  E'                      // her eliminerer vi left-recursion ved at sætte den nye terminal to the right
4. E' ->  E *  E'                      // same as above
  

b. Do Left Factorization of the grammar obtained in question (a):

In lines 3 and 4, E is a common prefix (prefixes can be both termimals and non-terminals)

1. E   ->  num E'
2. E'  ->  ε 
3. E'  ->  E E''                          // introduce new non-terminal E''
4. E'' ->  + E'
5. E'' ->  * E'

c. compute the Nullable and First sets for every production and the Follow sets for every nonterminal
 (see Slides ~25-31 in class lecture "Syntax Analysis" or Section 2.7-2.10 in book)

 Compute NULLABLE sets:
 ---------------------

 - Equations for nonterminals:

 Nullable(E)   =  Nullable(num E')                      
 Nullable(E')  =  Nullable(ε) OR Nullable(E E'')
 Nullable(E'') =  Nullable(+ E') OR Nullable(* E')

 -- Equations for the right-hand side:

 Nullable(E E'')    =   Nullable(E)   AND  Nullable(E'')
 Nullable(+ E')     =   Nullable(+)   AND  Nullable(E')
 Nullable(* E')     =   Nullable(*)   AND  Nullable(E')
 Nullable(num E')   =   Nullable(num) AND  Nullable(E')
 Nullable(ε)        =   true

 Fix-point solution of system initially assuming false for all:

 Nullable(num E')   =   false                   //Nullable(num) = false (rule)
 Nullable(E E'')    =   false                   //Nullable(E)   = false
 Nullable(+ E')     =   false
 Nullable(* E')     =   false

Finally rewrite equations for nonterminals, but also now the nullable set:
 Nullable(E)   = false                          // fordi E = numE' and numE'= false               
 Nullable(E')  = true                           // fordi E' = nullable(ε) ELLER ... -> true
 Nullable(E'') = false                          // fordi both (+E') AND (*E') we false



 Compute FIRST sets:
 -------------------
-- Equations for non-terminals:

First(E)    =   First(num E')               =   {num}
First(E')   =   Firtst(ε)   UNION  (E E'')  =   {num}
First(E'')  =   First(+ E') UNION  (* E')   =   {+, *}

-- Equations for the right-hand side (compute bottom-up; return to up):

First(E E'')    =   First(E)       // Is E nullable? No. Thus First(alfa)                           = {num}  // Non-terminal = Union of all its alfa, NOT beta, which is this case is E'
First(+ E')     =   First(+)       // det samme som nedenfor                                        = {+}    // as below
First(* E')     =   First(*)       //fordi * er ligesom constant, thus First(alpfa)                 = {*}    // as below
First(num E')   =   First(num)     //fordi num is not nullable (as a constant), thus First(alfa)    = {num}  // rule 2 for non-terminals
First(ε)        =   Ø              // rule 1


Compute FOLLOW sets for every non-terminal:
------------------------------------------


Set constraints for our grammar: 
-----------------------------------------------------------------------------------------
| G':   S  ->  E$        ...   First($)    ⊆   Follow(E)                                |
|                                                                                       |
|       E  ->  num E'    ...   Follow(E)   ⊆   Follow(E')                               | ?         // add all elements of E to E'
|                                                                                       |
|                                                                                       |
|       E' ->  ε         ...                                                            |
|                                                                                       |
|       E' ->  E E''     ...   First(E'')  ⊆   Follow(E),  Follow(E')  ⊆   Follow(E'')  |                    
|                                                                                       |
|       E'' ->  + E'     ...   Follow(E'') ⊆   Follow(E')                               |
|                                                                                       |
|       E'' ->  * E'     ...   Follow(E'') ⊆   Follow(E')                               |
-----------------------------------------------------------------------------------------

We solve the generated constraints and calculate the Follow sets of a grammar:












